#!/usr/bin/env node

var chalk = require('chalk');
var download = require('download-github-repo');
var exists = require('fs').existsSync;
var join = require('path').join;
var Khaos = require('..');
var resolve = require('path').resolve;
var program = require('commander');
var rm = require('rimraf').sync;
var uid = require('uid');

/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage('<template> <name>')
  .parse(process.argv);

/**
 * Padding.
 */

console.log();
process.on('exit', function(){
  console.log();
});

/**
 * Help.
 */

if (program.args.length < 2) return program.help();

/**
 * Settings.
 */

var template = program.args[0];
var name = program.args[1];
var from = resolve(process.env.HOME, '.khaos', template);
var to = resolve(name);

if (exists(to)) fatal('"' + name + '" already exists.');

/**
 * Generate from a locally-stored template.
 */

if (exists(from)) return generate(from, to, fatal);

/**
 * Generate from a remote template on GitHub.
 */

if (template.indexOf('/')) {
  var tmp = '/tmp/khaos-' + uid();

  download(template, tmp, function(err){
    fatal(err);
    generate(tmp, to, function(err){
      rm(tmp);
      fatal(err);
    });
  });

  return;
}

/**
 * Template not found.
 */

fatal('Could not find a template named "' + template + '".');

/**
 * Generate a khaos template given a `src` and `dest`.
 *
 * @param {String} src
 * @param {String} dest
 * @param {Function} fn
 */

function generate(src, dest, fn){
  try {
    var config = require(join(src, 'khaos.json'));
  } catch (e) {
    var config = {};
  }

  var template = config.template || 'template';
  var khaos = new Khaos(join(src, template), dest);
  khaos.run(fn);
}

/**
 * Log an error `message` to the console and exit.
 *
 * @param {String} message
 */

function fatal(message){
  if (!message) return;
  console.error(chalk.red('    error:'), message);
  process.exit(1);
}