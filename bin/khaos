#!/usr/bin/env node

var chalk = require('chalk');
var download = require('download-github-repo');
var exists = require('fs').existsSync;
var Khaos = require('..');
var resolve = require('path').resolve;
var program = require('commander');
var rm = require('rimraf').sync;
var uid = require('uid');

/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage('<template> <name>')
  .parse(process.argv);

/**
 * Padding.
 */

console.log();
process.on('exit', function(){
  console.log();
});

/**
 * Help.
 */

if (!program.args.length) return program.help();
if (!program.args[0]) fatal('template required');
if (!program.args[1]) fatal('name required');

/**
 * Settings.
 */

var template = program.args[0];
var name = program.args[1];
var from = resolve(process.env.HOME, '.khaos', template);
var to = resolve(name);

if (exists(to)) fatal('"' + name + '" already exists');

/**
 * Generate.
 */

// local
if (exists(from)) {
  Khaos(from, to).run(fatal);
}

// remote
else if (template.indexOf('/')) {
  var tmp = '/tmp/khaos-' + uid();
  download(template, tmp, function(err){
    if (err) throw err;
    Khaos(tmp, to).run(function(err){
      fatal(err);
      rm(tmp);
    });
  });
}

// not found
else {
  fatal('template not found');
}

/**
 * Log an error `message` to the console and exit.
 *
 * @param {String} message
 */

function fatal(message){
  if (!message) return;
  console.log(chalk.red('    error:'), message);
  process.exit(1);
}